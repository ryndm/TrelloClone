package com.example.ood_project.controllers;

import com.example.ood_project.exceptions.NotFoundException;
import com.example.ood_project.models.Task;
import com.example.ood_project.repositories.TaskRepository;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import java.util.*;

@Controller // This means that this class is a Controller
@RequestMapping(path="/tasks") // This means URL's start with /tasks (after Application path)
public class TaskController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TaskRepository taskRepository;

    @PostMapping(path="") // Map ONLY POST Requests
    public @ResponseBody Task addNewTask (@Valid @RequestBody Task task) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        return taskRepository.save(task);
    }

    @GetMapping(path="")
    public @ResponseBody Iterable<Task> getAllTasks() {
        // This returns a JSON or XML with the tasks

        // Add pagination, filtering etc.
        return taskRepository.findAll();
    }

    @GetMapping(path="/{id}")
    public @ResponseBody Optional<Task> getTask(@PathVariable long id) {
        // This returns a JSON or XML with the tasks
        return taskRepository.findById(id);
    }

    @DeleteMapping(path="/{id}")
    public @ResponseBody String deleteTask (@PathVariable long id) throws NotFoundException {
        return taskRepository.findById(id)
                .map(task -> {
                    taskRepository.deleteById(id);
                    return "Task with ID " + id + " deleted successfully";
                })
                .orElseThrow(() -> new NotFoundException("Task with ID " + id + " not found"));
    }

    @PutMapping(path="/{id}")
    public @ResponseBody Task modifyTask(@PathVariable long id, @Valid @RequestBody Task task) throws Exception {
        return taskRepository.findById(id)
                .map(existingTask -> {
                    if (task.getUsers() != null)
                        existingTask.setUsers(task.getUsers());

                    if (task.getState() != null)
                        existingTask.setState(task.getState());

                    if (task.getDescription() != null)
                        existingTask.setDescription(task.getDescription());

//            if (task.getComments() != null) {
//                existingTask.setComments(task.getComments());
//            }
                    return taskRepository.save(existingTask);
                })
                .orElseThrow(() -> new NotFoundException("Task with ID " + id + " not found"));

        // Modify Task API PutMapping
        // Validation needed
        // is the task present etc.

        // Delete Task API DeleteMapping
        // is the task present.
    }
}
