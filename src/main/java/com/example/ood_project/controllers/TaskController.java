package com.example.ood_project.controllers;

import com.example.ood_project.exceptions.NotFoundException;
import com.example.ood_project.models.*;
import com.example.ood_project.repositories.TaskRepository;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import java.util.*;
import java.util.Observable;
import java.util.Observer;

@Controller // This means that this class is a Controller
@RequestMapping(path="/tasks") // This means URL's start with /tasks (after Application path)
public class TaskController implements Observer {
    private TaskAssignmentObservable taskAssignmentObservable = new TaskAssignmentObservable();

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TaskRepository taskRepository;
    private Stack<TaskMemento> taskHistory = new Stack<>();

    @PostMapping(path="") // Map ONLY POST Requests
    public @ResponseBody Task addNewTask (@Valid @RequestBody Task task) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Set<User> users = task.getUsers();

        for (User user : users) {
            String userName = user.getUsername();
            taskAssignmentObservable.taskAssigned(userName);
        }

        return taskRepository.save(task);
    }

    @Override
    public void update(Observable o, Object userName) {
        if (userName instanceof String) {
            System.out.println("User " + userName + " has been assigned a new task.");
        }
    }

    @GetMapping(path="")
    public @ResponseBody Iterable<Task> getAllTasks() {
        // This returns a JSON or XML with the tasks

        // Add pagination, filtering etc.
        return taskRepository.findAll();
    }
    @GetMapping(path="/getTasksByStatus")
    public @ResponseBody Iterable<Task> getTasksByStatus(@RequestBody TaskState state) {
        List<Task> tasks = taskRepository.findByState(state);
        return tasks;
    }
//    @GetMapping(path="/getTasksByAssignee")
//    public @ResponseBody Iterable<Task> getTasksByAssignee(@RequestBody String user) {
//        List<Task> tasks = taskRepository.findByAssignee(user);
//        return tasks;
//    }

    @GetMapping(path="/getTaskByTitle")
    public @ResponseBody Iterable<Task> getTasksByTitle(@RequestBody String title) {
        List<Task> tasks = taskRepository.findByTitle(title);
        return tasks;
    }

    @GetMapping(path="/{id}")
    public @ResponseBody Optional<Task> getTask(@PathVariable long id) {
        // This returns a JSON or XML with the tasks
        return taskRepository.findById(id);
    }

    @DeleteMapping(path="/{id}")
    public @ResponseBody String deleteTask (@PathVariable long id) throws NotFoundException {
        Optional<Task> deletedTask = taskRepository.findById(id);
        return taskRepository.findById(id)
                .map(task -> {
                    Task deleteTask = deletedTask.get();
                    TaskMemento memento = new TaskMemento(task);

                    taskRepository.deleteById(id);
                    taskHistory.push(memento);
                    return "Task with ID " + id + " deleted successfully";
                })
                .orElseThrow(() -> new NotFoundException("Task with ID " + id + " not found"));
    }

    @PostMapping(path="/undoDelete")
    public @ResponseBody String undoDelete() {
        if (!taskHistory.isEmpty()) {
            TaskMemento lastMemento = taskHistory.pop();
            Task taskToRestore = lastMemento.getTask();
            taskRepository.save(taskToRestore);
            return "Last delete operation undone.";
        } else {
            return "No delete operation to undo.";
        }
    }

    @PutMapping(path="/{id}")
    public @ResponseBody Task modifyTask(@PathVariable long id, @Valid @RequestBody Task task) throws Exception {
        return taskRepository.findById(id)
                .map(existingTask -> {
                    if (task.getUsers() != null)
                        existingTask.setUsers(task.getUsers());

                    if (task.getState() != null)
                        existingTask.setState(task.getState());

                    if (task.getDescription() != null)
                        existingTask.setDescription(task.getDescription());

//                    if (task.getComments() != null) {
//                        List<String> commentsList = new ArrayList<String>();
//                        if (existingTask.getComments() != null)
//                            commentsList.addAll(existingTask.getComments());
//                        commentsList.addAll(task.getComments());
//                        existingTask.setComments(commentsList);
//                    }

                    return taskRepository.save(existingTask);
                })
                .orElseThrow(() -> new NotFoundException("Task with ID " + id + " not found"));

        // Modify Task API PutMapping
        // Validation needed
        // is the task present etc.

        // Delete Task API DeleteMapping
        // is the task present.
    }
}
