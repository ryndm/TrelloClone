package com.example.ood_project.controllers;

import com.example.ood_project.models.Task;
import com.example.ood_project.models.TaskState;
import com.example.ood_project.repositories.TaskRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import java.util.*;
import java.time.LocalDateTime;

@Controller // This means that this class is a Controller
@RequestMapping(path="/tasks") // This means URL's start with /tasks (after Application path)
public class TaskController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TaskRepository taskRepository;

    @PostMapping(path="/createTask") // Map ONLY POST Requests
    public @ResponseBody String addNewTask (@RequestBody Task task) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Long id = Long.valueOf(UUID.randomUUID().toString());
        task.setId(id);
        task.setCreated_at(LocalDateTime.now());
        try {
            taskRepository.save(task);
            return task.getId().toString();
        } catch (Exception e) {
            return "Failure";
        }
    }

    @GetMapping(path="/showBoard")
    public @ResponseBody Iterable<Task> getAllTasks() {
        // This returns a JSON or XML with the tasks

        // Add pagination, filtering etc.
        return taskRepository.findAll();
    }
    @GetMapping(path="/getTasksByStatus")
    public @ResponseBody Iterable<Task> getTasksByStatus(@RequestBody TaskState state) {
        List<Task> tasks = taskRepository.findByState(state);
        return tasks;
    }
    @GetMapping(path="/getTasksByAssignee")
    public @ResponseBody Iterable<Task> getTasksByAssignee(@RequestBody String user) {
        List<Task> tasks = taskRepository.findByAssignee(user);
        return tasks;
    }

    @GetMapping(path="/getTaskByTitle")
    public @ResponseBody Iterable<Task> getTasksByTitle(@RequestBody String title) {
        List<Task> tasks = taskRepository.findByTitle(title);
        return tasks;
    }

    @DeleteMapping(path="/deleteTask/{id}")
    public @ResponseBody String deleteTask (@PathVariable long Id){
        try {
            Optional<Task> optionalTask = taskRepository.findById(Id);
            if (optionalTask.isPresent()) {
                taskRepository.deleteById(Id);
                return "Task with ID " + Id + " deleted successfully";
            }
            else return "Task with ID "+Id+" not found";
        } catch (Exception e) {
            return "Failed to delete task with ID " + Id;
        }
    }

    @PutMapping(path="/modifyTask/{id}")
    public @ResponseBody String modifyTask(@PathVariable long Id, @RequestBody Task task){
        Optional<Task> optionalTask = taskRepository.findById(Id);
        if (optionalTask.isPresent()) {
            Task existingTask = optionalTask.get();

            if (task.getUsers() != null) {
                existingTask.setUsers(task.getUsers());
            }
            if (task.getState() != null) {
                existingTask.setState(task.getState());
            }
            if (task.getDescription() != null) {
                existingTask.setDescription(task.getDescription());
            }
            if (task.getComments() != null) {
                List<String> commentsList = new ArrayList<String>();
                if (existingTask.getComments() != null)
                    commentsList.addAll(existingTask.getComments());
                commentsList.addAll(task.getComments());
                existingTask.setComments(commentsList);
            }

            try {
                taskRepository.save(existingTask);
                return "Task with ID " + Id + " updated successfully";
            } catch (Exception e) {
                return "Failed to update task with ID " + Id;
            }
        } else {
            return "Task with ID " + Id + " not found";
        }

    }



    // Modify Task API PutMapping
    // Validation needed
    // is the task present etc.

    // Delete Task API DeleteMapping
    // is the task present.
}
